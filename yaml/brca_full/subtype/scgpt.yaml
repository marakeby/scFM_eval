run_id: 
dataset:
    module: data.scgpt_loader
    class: scgptLoader
    path: mnt/DATA/brca_full/cancer_cells_only.h5ad #path is relative to DATA_PATH in setup_path.py
    load_raw: False
    label_key: Cancer_type
    batch_key: donor_id
    filter: 
      - column: Cancer_type
        values:
          - ER+
          - TNBC
      - column: timepoint
        values:
          - Pre
    layer_name: X  #if data exist in another layer (e.g. adta.layers['counts']). The data will be copied to adata.X
    train_test_split: data_splits/brca_full/brca_subtype/train_test_split.json #path is relative to BASE_PATH in setup_path.py
    cv_splits: data_splits/brca_full/brca_subtype/cv_splits.json #path is relative to BASE_PATH in setup_path.py

qc:
    # skip: True
    min_genes: 10
    min_cells: 10

preprocessing:
    # skip: True
    normalize: True
    target_sum: 10000
    apply_log1p: True

hvg:
    batch_key: batch
    n_top_genes: 4096
    flavor: seurat # expect logarithmized data
    
embedding:
    method: scgpt
    module: features.scgpt_extractor
    class: scGPT_Exractor
    viz: True
    eval: True
    params: 
        #Human
        model: scGPT_human
        model_dir: /home/jupyter/MODELS_old/scGPT
        batch_size: 16
        n_bins: 51
        max_seq_len: 2048

classification:
    module: models.classify
    class: ClassifierPipeline
    params:
        model: randomforest
        n_estimators: 100
        max_depth: 5
        cv: True
        train_funcs: 
            - avg
            - mil
            - vote
        label_map:
              ER+: 0
              TNBC: 1
    viz: True
    eval: True
